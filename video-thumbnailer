#!/bin/bash

readonly THUMBNAIL_WIDTH=1920
readonly FONT_FILE="$(dirname $0)/fonts/ipagp00303/ipagp.ttf"

readonly FFMPEG_LOGLEVEL=quiet
readonly FONT_DL_URL=https://ipafont.ipa.go.jp/IPAfont/ipagp00303.zip
readonly RATE_MAX=$(bc<<<"scale=6; 1 / 5") # minimum interval = 5sec

set -e

# download font if needed
if [ ! -f $FONT_FILE ]; then
  echo downloading font...
  curl -Lo fonts.zip $FONT_DL_URL
  unzip fonts.zip -d fonts
  rm fonts.zip
  echo font downloaded.
fi

usage() {
  cat <<EOF
  Usage:
  $0 cols rows video_file

  Description:
  Create video thumbnail.
EOF
  exit 0
}

if [ $# -lt 3 ]; then
  usage
fi

readonly COLS=$1
readonly ROWS=$2
readonly SRC=$3
readonly CELLS=$(($COLS * $ROWS))


generate() {
  local readonly SRC_FILE=$1
  local readonly SRC_FILENAME=$(basename "$SRC_FILE")

  # make temp directory
  local readonly TEMP_DIR=$(mktemp -d)
  echo work directory: $TEMP_DIR

  local readonly PROBED_FILE=$TEMP_DIR/probe.json
  local readonly LIST_FILE=$TEMP_DIR/list.txt
  local readonly HEADER_IMAGE_FILE=$TEMP_DIR/header.png
  local readonly THUMBS_IMAGE_FILE=$TEMP_DIR/thumbs.png

  # get video information
  echo probing video...
  ffprobe -loglevel $FFMPEG_LOGLEVEL -i "$SRC_FILE" -show_format -show_streams -print_format json > $PROBED_FILE
  local readonly DURATION=$(cat $PROBED_FILE | jq .format.duration | tr -d '"')
  local readonly FILESIZE=$(cat $PROBED_FILE | jq .format.size | tr -d '"')
  local readonly RESOLUTION_WIDTH=$(cat $PROBED_FILE | jq '.streams[] | select(.codec_type == "video") | .width')
  local readonly RESOLUTION_HEIGHT=$(cat $PROBED_FILE | jq '.streams[] | select(.codec_type == "video") | .height')
  local readonly R_FRAME_RATE=$(cat $PROBED_FILE | jq '.streams[] | select(.codec_type == "video") | .r_frame_rate' | tr -d '"')
  local readonly VIDEO_CODEC=$(cat $PROBED_FILE | jq '.streams[] | select(.codec_type == "video") | .codec_long_name' | tr -d '"')
  local readonly AUDIO_CODEC=$(cat $PROBED_FILE | jq '.streams[] | select(.codec_type == "audio") | .codec_long_name' | tr -d '"')
  local readonly VIDEO_BITRATE=$(cat $PROBED_FILE | jq '.streams[] | select(.codec_type == "video") | .bit_rate' | tr -d '"')
  local readonly AUDIO_BITRATE=$(cat $PROBED_FILE | jq '.streams[] | select(.codec_type == "audio") | .bit_rate' | tr -d '"')
  echo video probed.

  # create thumbnails
  echo creating thumbnails...
  local readonly RATE=$(bc <<<"scale=6; if ((1 / $DURATION * $CELLS) > $RATE_MAX) $RATE_MAX else (1 / $DURATION * $CELLS)")
  local readonly SCALE_W=$(bc <<<"scale=0; $THUMBNAIL_WIDTH / $COLS")
  ffmpeg -loglevel $FFMPEG_LOGLEVEL -nostdin -i "$SRC_FILE" -an -vf "fps=fps=$RATE:round=down, scale=$SCALE_W:-1, drawtext=fontfile='$FONT_FILE': text='%{pts\:hms}': x=10: y=h-th-10: fontcolor=white: box=1: boxcolor=0x00000080: boxborderw=5: fontsize=12" -vsync 0 $TEMP_DIR/capture_%06d.png

  echo thumbnails created.

  # create thumbnail file list
  find $TEMP_DIR -name "capture_*.png" | sort | head -$CELLS > $LIST_FILE

  # create header
  echo creating header...
  local readonly DURATION_HOUR=$(bc <<<"scale=0; $DURATION / 3600")
  local readonly DURATION_MIN=$(bc <<<"scale=0; ($DURATION - $DURATION_HOUR * 3600) / 60")
  local readonly DURATION_SEC=$(bc <<<"scale=0; ($DURATION - $DURATION_HOUR * 3600 - $DURATION_MIN * 60) / 1")
  local readonly FILESIZE_GB=$(bc <<<"scale=2; $FILESIZE / 1000000000")
  local readonly FILESIZE_MB=$(bc <<<"scale=2; $FILESIZE / 1000000")
  local readonly FPS=$(bc <<<"scale=3; $R_FRAME_RATE")
  local readonly VIDEO_BITRATE_KB=$(bc <<<"scale=2; $VIDEO_BITRATE / 1000")
  local readonly AUDIO_BITRATE_KB=$(bc <<<"scale=2; $AUDIO_BITRATE / 1000")
  local readonly HEADER_STR=`cat<<EOF
File Name: $SRC_FILENAME
File Size: $(printf "%0.2f GB / %0.2f MB" $FILESIZE_GB $FILESIZE_MB)
Resolution: ${RESOLUTION_WIDTH}x${RESOLUTION_HEIGHT} / $FPS ($R_FRAME_RATE) FPS
Duration: $(printf "%02d:%02d:%02d" $DURATION_HOUR $DURATION_MIN $DURATION_SEC)
Video: $VIDEO_CODEC / $VIDEO_BITRATE_KB kbps
Audio: $AUDIO_CODEC / $AUDIO_BITRATE_KB kbps
EOF
  `
  echo -n "$HEADER_STR" | convert -background black -fill white -font "$FONT_FILE" -pointsize 14 -size $THUMBNAIL_WIDTH caption:@- $HEADER_IMAGE_FILE
  echo header created.

  # concat them
  echo concat thumbnails and header...
  montage @$LIST_FILE -tile ${COLS}x -geometry ${SCALE_W}x-1 -border 1 -bordercolor white -background black $THUMBS_IMAGE_FILE
  convert $HEADER_IMAGE_FILE $THUMBS_IMAGE_FILE -append -quality 85 "${SRC_FILE%.*}.jpg"
  echo completed: "${SRC_FILE%.*}.jpg"

  rm -rf $TEMP_DIR
}


if [ "${SRC:0:1}" = "@" ]; then
  # treat arg as list file
  cat "${SRC:1}" | while read line
  do
    if [ -n "$line" ]; then
      echo start processing "$line"
      generate "$line"
    fi
  done
else
  # treat arg as movie file
  generate "$SRC"
fi
